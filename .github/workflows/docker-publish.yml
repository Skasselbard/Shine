name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: shine

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run tests
        run: docker build . --file Dockerfile

  versioning:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: paulhatch/semantic-version@v3.1.2
        with:
          branch: "master"
          tag_prefix: "v"
          major_pattern: "major:"
          minor_pattern: "minor:"
          format: "${major}.${minor}.${patch}-prerelease.${increment}"
          short_tags: false


  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: versioning

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.DOCKER }}" | docker login -u $(echo ${{ github.actor }} | tr '[A-Z]' '[a-z]') --password-stdin

      # - name: Get the version
      #     id: vars
      #     run: echo ::set-output name=tag::$(echo ${GITHUB_REF:10})

      # - name: Build tagged Docker Image
      #     run: docker build . --file Dockerfile --tag $IMAGE_NAME:${{steps.vars.outputs.tag}}

      - name: Build Docker image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Push image
        run: |
          IMAGE_ID=${{ github.repository }}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
